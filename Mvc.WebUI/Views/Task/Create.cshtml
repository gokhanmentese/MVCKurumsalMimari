
@{
    ViewData["Title"] = "Yeni Görev";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Mvc.WebUI.ViewModel.TaskViewModel


<script type="text/javascript" src="~/js/ckeditor/ckeditor.js"></script>
<script type="text/javascript" src="~/js/ckeditor/config.js"></script>
<script type="text/javascript" src="~/js/ckeditor/adapters/jquery.js"></script>
<script type="text/javascript" src="~/js/bootstrap-datepicker.js"></script>
<script type="text/javascript" src="~/js/bootstrap-timepicker.min.js"></script>

<link href="~/css/datepicker.css" rel="stylesheet" />
<link href="~/js/ckeditor/skins/moono/editor.css" rel="stylesheet" />
<script src="~/js/ckeditor/styles.js"></script>
<script src="~/js/ckeditor/lang/tr.js"></script>
<script src="~/js/ckeditor/build-config.js"></script>

<script>
    $(document).ready(function () {
        $(".datepicker").datepicker({
            format: 'dd.mm.yyyy'
        });
    });
</script>

@await Component.InvokeAsync("PageTitle", Model.PageTitleOptions)



<div class="panel-group">

    @using (Html.BeginForm("Create", "Task", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.Task.Subject, "Konu")
                    </div>
                    <div class="col-md-10">
                        @Html.TextBoxFor(t => t.Task.Subject, new { @class = "form-control", placeholder = "Görev Konusu" })

                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.Task.Description, "Görev İçeriği")
                    </div>
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.Task.Description, new { @class = "form-control ckeditor", placeholder = "Görev" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.Task.StartDate, "Başlangıç Tarihi")
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(t => t.Task.StartDate, new { @class = "form-control datepicker", placeholder = "dd.mm.yyyy" })
                    </div>
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.Task.EndDate, "Bitiş Tarihi")
                    </div>
                    <div class="col-md-4">
                        @Html.TextBoxFor(t => t.Task.EndDate, new { @class = "form-control datepicker", placeholder = "dd.mm.yyyy" })
                    </div>
                </div>

                @if (Model.Task.StateCode ==11)
                {
                    <div class="form-group row">
                        <div class="col-md-2">
                            <label>Müdürlük </label>
                        </div>
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.DirectorshipId, Model.Directorships, "", new { id = "drpDirectorships", @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-2">
                            <label>Bölüm </label>
                        </div>
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.DepartmentId, Model.Departments, "", new { id = "drpDepartments", @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-2">
                            <label>Birim </label>
                        </div>
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.UnitId, Model.Units, "", new { id = "drpUnits", @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-2">
                            @Html.LabelFor(t => t.Task.AssignUserId, "Görev Sorumlusu")
                        </div>
                        <div class="col-md-10">

                            @Html.DropDownListFor(m => m.Task.AssignUserId, Model.AssignUsers, "", new { id = "drpAssignUsers", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Task.AssignUserId, "", new { @class = "text-danger" })

                            @*@Html.DropDownListFor(m => m.SelectedUserId, Model.AssignUsers, "Kullanıcı Seçiniz", new { @class = "form-control" })*@

                            @*@Html.DropDownList("AssignUsers", null, "Kullanıcı Seçiniz", new { @class = "form-control" })*@
                        </div>
                    </div>
                }
            </div>

            <div class="panel-footer">
                <div class="row">
                    <div class="col-md-12">
                        <div class="col-md-offset-11 col-md-9">
                            <button type="submit" value="Kaydet" class="btn btn-primary">Kaydet</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (ViewBag.Message != null)
    {
        <script type="text/javascript">
            window.onload = function () {
                alert("@ViewBag.Message");
            };
        </script>
    }
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#drpCategories").chosen();
            $("#drpAssignUsers").chosen();

            $("#drpDirectorships").chosen();
            $("#drpDepartments").chosen();
            $("#drpUnits").chosen();

            var drpDepartments = $('#drpDepartments');
            var drpUnits = $('#drpUnits');
            var drpAssignUsers = $('#drpAssignUsers');


            $('#drpDirectorships').change(function (event, ui) {
                var directorship_id = this.value;
                drpDepartments.prop("disabled", false);
                $('#drpDepartments').empty();
                drpDepartments.append($('<option></option>').val("-1").html(''));

                loadDepartments(directorship_id); // This is append values to option

                drpUnits.prop("disabled", false);
                $('#drpUnits').empty();
                drpUnits.trigger("chosen:updated");

                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.trigger("chosen:updated");

            });

            $('#drpDepartments').change(function (event, ui) {
                var department_id = this.value;
                drpUnits.prop("disabled", false);
                $('#drpUnits').empty();

                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.trigger("chosen:updated");

                drpUnits.append($('<option></option>').val("-1").html(''));

                loadUnits(department_id); // This is append values to option
            });

            $('#drpUnits').change(function (event, ui) {
                var unit_id = this.value;
                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.append($('<option></option>').val("-1").html(''));

                loadUsers(unit_id); // This is append values to option
            });

            function loadDepartments(directorship_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetDepartments", "Departman")",
                    data: { "id": directorship_id },
                    success: function (data) {
                        if (data != null && data.length !=0) {
                            $.each(data, function (i, option) {
                                drpDepartments.append($("<option>").val(option.value).text(option.text));
                                //drpDepartments.append($('<option></option>').val(option.value).html(option.text));
                            });
                        }

                        drpDepartments.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }

            function loadUnits(department_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetUnits", "Unit")",
                    data: { "id": department_id },
                    success: function (data) {
                        $.each(data, function (i, option) {
                            drpUnits.append($("<option>").val(option.value).text(option.text));
                        });
                        drpUnits.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }

            function loadUsers(unit_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetUsers", "User")",
                    data: { "id": unit_id },
                    success: function (data) {
                        $.each(data, function (i, option) {
                            drpAssignUsers.append($("<option>").val(option.value).text(option.text));
                        });
                        drpAssignUsers.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }
        });
    </script>
}




