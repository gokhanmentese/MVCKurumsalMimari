
@{
    ViewData["Title"] = "Görev Devret";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Mvc.WebUI.ViewModel.AssignTaskViewModel

@await Component.InvokeAsync("PageTitle", Model.PageTitleOptions)

<div class="panel-group">

    @using (Html.BeginForm("Update", "Task", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="panel panel-default">
            <div class="panel-body">

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.AssignTask.Description, "Görev Devir Açıklaması")
                    </div>
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.AssignTask.Description, new { @class = "form-control ckeditor", placeholder = "Görev Devir Açıklaması" })

                        @*@await Component.InvokeAsync("CKEditor", Model.CKEditor)*@
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        <label>Müdürlük </label>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.DirectorshipId, Model.Directorships, "", new { id = "drpDirectorships", @class = "form-control" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        <label>Bölüm </label>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.DepartmentId, Model.Departments, "", new { id = "drpDepartments", @class = "form-control" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        <label>Birim </label>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.UnitId, Model.Units, "", new { id = "drpUnits", @class = "form-control" })
                    </div>
                </div>

                <div class="form-group row">
                    <div class="col-md-2">
                        @Html.LabelFor(t => t.AssignTask.AssignUserId, "Görev Sorumlusu")
                    </div>
                    <div class="col-md-10">

                        @Html.DropDownListFor(m => m.AssignTask.AssignUserId, Model.AssignUsers, "", new { id = "drpAssignUsers", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AssignTask.AssignUserId, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="panel-footer">
                <div class="row">
                    <div class="col-sm-12 text-right">
                        <input type="submit" name="Assign" class="btn btn-primary btn-md" value="Devret"
                               formaction="@Url.Action("Transfer","Task")" formmethod="post" />

                        <input type="submit" name="ClosedAssign" class="btn btn-danger btn-md" value="Tamamlandı Devret"
                               formaction="@Url.Action("ClosedTransfer","Task")" formmethod="post" />
                    </div>
                </div>
            </div>
        </div>

        @Html.HiddenFor(t => t.AssignTask.TaskId)
        @Html.HiddenFor(t => t.AssignTask.Id)
    }
</div>

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $("#drpAssignUsers").chosen();

            $("#drpDirectorships").chosen();
            $("#drpDepartments").chosen();
            $("#drpUnits").chosen();

            var drpDepartments = $('#drpDepartments');
            var drpUnits = $('#drpUnits');
            var drpAssignUsers = $('#drpAssignUsers');


            $('#drpDirectorships').change(function (event, ui) {
                var directorship_id = this.value;
                drpDepartments.prop("disabled", false);
                $('#drpDepartments').empty();
                drpDepartments.append($('<option></option>').val("-1").html(''));

                loadDepartments(directorship_id); // This is append values to option

                drpUnits.prop("disabled", false);
                $('#drpUnits').empty();
                drpUnits.trigger("chosen:updated");

                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.trigger("chosen:updated");

            });

            $('#drpDepartments').change(function (event, ui) {
                var department_id = this.value;
                drpUnits.prop("disabled", false);
                $('#drpUnits').empty();

                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.trigger("chosen:updated");

                drpUnits.append($('<option></option>').val("-1").html(''));

                loadUnits(department_id); // This is append values to option
            });

            $('#drpUnits').change(function (event, ui) {
                var unit_id = this.value;
                drpAssignUsers.prop("disabled", false);
                $('#drpAssignUsers').empty();
                drpAssignUsers.append($('<option></option>').val("-1").html(''));

                loadUsers(unit_id); // This is append values to option
            });

            function loadDepartments(directorship_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetDepartments", "Departman")",
                    data: { "id": directorship_id },
                    success: function (data) {
                        if (data != null && data.length !=0) {
                            $.each(data, function (i, option) {
                                drpDepartments.append($("<option>").val(option.value).text(option.text));
                                //drpDepartments.append($('<option></option>').val(option.value).html(option.text));
                            });
                        }

                        drpDepartments.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }

            function loadUnits(department_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetUnits", "Unit")",
                    data: { "id": department_id },
                    success: function (data) {
                        $.each(data, function (i, option) {
                            drpUnits.append($("<option>").val(option.value).text(option.text));
                        });
                        drpUnits.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }

            function loadUsers(unit_id) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@Url.Action("GetUsers", "User")",
                    data: { "id": unit_id },
                    success: function (data) {
                        $.each(data, function (i, option) {
                            drpAssignUsers.append($("<option>").val(option.value).text(option.text));
                        });
                        drpAssignUsers.trigger("chosen:updated");
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
             });
            }

        });
    </script>
}